behavioral：结构型设计模式
    1、responsibility：责任链模式
        1.创建抽象的记录器类 AbstractLogger
        2.创建扩展了该记录器类的实体类 ConsoleLogger、ErrorLogger、FileLogger
        3.创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。
        意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，
            直到有对象处理它为止。
        使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。
            2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。
            3、可动态指定一组对象处理请求。
        实现：我们创建抽象类 AbstractLogger，带有详细的日志记录级别。然后我们创建三种类型的记录器，都扩展了 AbstractLogger。
            每个记录器消息的级别是否属于自己的级别，如果是则相应地打印出来，否则将不打印并把消息传给下一个记录器
    2、Command 命令模式
        1.创建一个命令接口。Order
        2.创建一个请求类。Stock
        3.创建实现了 Order 接口的实体类 BuyStock、SellStock
        4.创建命令调用类:Broker
        5.使用 Broker 类来接受并执行命令 CommandPatternDemo
        意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。
        使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。
        实现： 我们首先创建作为命令的接口 Order，然后创建作为请求的 Stock 类。实体命令类 BuyStock 和 SellStock，实现了 Order 接口，
        将执行实际的命令处理。创建作为调用对象的类 Broker，它接受订单并能下订单。
        Broker 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。CommandPatternDemo 类使用 Broker 类来演示命令模式。
    3、Interpreter 解释器模式
