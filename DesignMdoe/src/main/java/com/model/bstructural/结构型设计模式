structural：结构型设计模式
    1、Adapter：适配器模式
        1.为媒体播放器和更高级的媒体播放器创建接口。
            MediaPlayer - 媒体播放机、AdvancedMediaPlayer - 高级媒体播放机
        2.创建实现了AdvancedMediaPlayer接口的实体类。
            Mp4Player - MP4播放器、VlcPlayer - vlc播放器
        3.创建实现了MediaPlayer接口的适配器类。
            MediaAdapter - 媒体适配器
        4.创建实现了MediaPlayer接口的实体类。
            AudioPlayer - 音乐播放器
        5.使用AudioPlayer来播放不同类型的音频格式。
            AdapterPatternDemo
        意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
        使用场景：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。

    2、Bridge：桥接模式
        1.创建桥接实现接口
            DrawAPI - 画
        2.创建实现了 DrawAPI 接口的实体桥接实现类
            RedCircle - 红圆、 GreenCircle - 绿圆
        3.使用 DrawAPI 接口创建抽象类 Shape。
        4.创建实现了 Shape 抽象类的实体类。（使用DrawAPI接口，灵活扩展）
        5.使用 Shape 和 DrawAPI 类画出不同颜色的圆。
        意图：将抽象部分与实现部分分离，使它们都可以独立的变化。
        使用场景：
            1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，
                避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。
            2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。
            3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。

    3、Composite 组合模式
        1.创建 Employee 类，该类带有 Employee 对象的列表。
        2.使用 Employee 类来创建和打印员工的层次结构。
        意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
        使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。

    4、Decorator 装饰器模式
        1.创建 Shape 接口
        2.创建实现接口的实体类： Rectangle 、 Circle
        3.创建实现了Shape接口的抽象修饰类：ShapeDecorator
        4.创建扩展了 ShapeDecorator 类的实体装饰类：RedShapeDecorator 。
        5.DecoratorPatternDemo使用 RedShapeDecorator 来装饰 Shape 对象。
        意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。
        使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。

    5、Facade 外观模式
        1.创建一个接口 Shape
        2.创建实现接口的实体类:Rectangle、Square、Circle
        3.创建一个外观类：ShapeMaker
        4.FacadePatternDemo 使用该外观类画出各种类型的形状
        意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
        使用场景： 1、为复杂的模块或子系统提供外界访问的模块。
                    2、子系统相对独立。
                    3、预防低水平人员带来的风险。
    6、Flyweight 享元模式
        1.创建形状接口：Shape
        2.创建实现接口的实体类：Circle
        3.创建一个工厂 ShapeFactory，生成基于给定信息的实体类的对象。
        4.使用该工厂，通过传递颜色信息来获取实体类的对象。
        意图：运用共享技术有效地支持大量细粒度的对象。
        使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。

    7、Proxy 代理模式
        1.创建一个接口：Image
        2.创建实现接口的实体类：ImageImpl、代理类：ProxyImage
        3.当被请求时，使用 ProxyImage 来获取 RealImage 类的对象
        意图：为其他对象提供一种代理以控制对这个对象的访问。
        使用场景：按职责来划分，通常有以下使用场景： 1、远程代理 2、虚拟代理 3、Copy-on-Write 代理
         4、保护代理 5、Cache代理 6、防火墙代理 7、同步化代理 8、智能引用代理。